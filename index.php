<?php
    $nickname=" Alexander!";
    $hello="Привет, ";
    $hellow="Продолжаем наш курс по обучению PHP";
?>
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Получение данных из HTML. Методы GET и POST</title>
    <link rel="stylesheet" type="text/css" href="style.css"/>
   

</head>
<body>

    <header class="title">
        <?php
            echo "<h3>", $hello . $nickname, "</h3>";
            echo "<h4>", $hellow, "</h4>";
        ?>
        <h2>Получение данных из HTML. Методы GET и POST.</h2>

    </header>
    <div class="text__lesson">
        <h3 class="subtitle">Подключение данных из HTML формы.</h3>
        <p>
            Формы — это часть языка HTML. Формы нужны для передачи данных от клиента на сервер. Чаще всего формы используются для регистрации пользователей, заполнения анкет, оформления заказа в интернет магазине, и так далее.
        </p>
        <p>    
            Через формы можно отправлять как простую текстовую информацию, так и файлы.
        </p>
        <p>
            Большую часть времени программирования на PHP будет так или иначе связана с работой с формами и данными из них.
        </p>
        <p>    
            HTML описывает то, из каких элементов состоит форма, и как она выглядит. Но без принимающей стороны, то есть сервера, который принимает эти данные и обрабатывает их нужным образом, создавать формы нет никакого смысла.
        </p>
        <p> 
            PHP содержит множество средств для работы с формами. Это позволяет очень просто решать типичные задачи, которые часто возникают в веб-программировании:
            <ul>
                <li>Регистрация и аутентификация пользователя;</li>
                <li>Отправка комментариев на форумах и социальных сетях;</li>
                <li>Оформление заказов.</li>
            </ul>
            Практически любой современный сайт содержит как минимум несколько разных HTML-форм.
        </p>
        <p>
            Напишем код HTML простой формы:
            <ul>
                <li>form action:"/"; method="get"></li>
                <li>label>Ваше имя input type="text" name="name" placeholder="Ваше имя"> /label></li>
                <!-- <li>input type="text" name="email" placeholder="Ваш email"></li> -->
                <li>input type="submit" value="отправить"></li>
            </ul>
            Вот так наше форма связи будет выглядеть в коде HTML:<br>
            <form  method="get">
                <label>Ваше имя<input type="text" name="name" placeholder="Ваше имя"></label>
                <!-- <input type="text" name="email" placeholder="Ваш email"> -->
                <input type="submit" value="отправить">
            </form>
            Теперь в кратце отразим, что в наше коде HTML мы указали:
            <ul>
                <li> Атрибут action содержит URL, на который информация в форме будет отправлена для обработки сервером. Атрибут method является методом HTTP, который должны использовать браузеры для отправки данных формы.</li>
                <li>Практически все поля для формы создается с помощью элемента input> (от англ. input — ввод). Внешний вид элемента input> меняются в зависимости от значения его атрибута type.</li>
                <li>Aтрибут type указывает предназначение поля ввода(т.е. input).</li>
                <li>Атрибут name устанавливает имя поля ввода.</li>
                <li>Атрибут placeholder отробжает текст, который будет виден в поле ввода.</li>
                <li>Атрибут value задает значение, которое по умолчанию отображается в текстовом поле в момент загрузки формы.</li>
            </ul>
            <b style="color:red;">атрибут action="/" пока уберем из формы, чтобы можно было видет работу.</b>
            Теперь непосредственно объяснение, того, что написано в коде HTML:
            <ul>
                <li> весь приведённый код описывает внешний вид и содержание формы, но следует обратить внимание на два атрибута тега form>, которые нужны для указания на способ обработки данных:</li>
                <li><b>method</b> — этот атрибут используется для определения метода HTTP, который будет использован для передачи данных на сервер.</li>
                <li>Метод <b>GET</b> - используется для получения информации от сервера по заданному URI (URI в HTTP). Запросы клиентов, использующие метод <b>GET</b> должны получать только данные и не должны никак влиять на эти данные. Таким образом, метод <b>GET</b> запрашивает представление ресурса. Запросы с использованием этого метода могут только извлекать данные.</li>
                <li>Метод <b>POST</b> сообщает о намерении передать на сервер некоторую информацию, что, впрочем, не отменяет последующее получение контента. Таким образом, метод <b>POST</b> используется для отправки сущностей к определённому ресурсу. Часто вызывает изменение состояния или какие-то побочные эффекты на сервере.</li>
                <li><b>action</b> — содержит адрес PHP-скрипта, который должен обработать эту форму.</li>
            </ul>
            После нажатия на кнопку «отправить», браузер выполняет <b>GET</b> или <b>POST</b> запрос со введёнными данными на адрес, указанный в атрибуте action.<br>
            В нашем конкретном коде это метод <b>GET</b>.
        </p>
        <p>
        После отправки формы управление передаётся PHP-скрипту, который должен получить переданные данные, выполнить с ними какие-либо действия (например, сохранить в базе данных) и показать результат.<br>
        Результатом может быть какое-нибудь сообщение об успешном завершении операции, например, «ваши данные успешно отправлены».
        </p>
        <p>
        Поэтому требуется в первую очередь научиться получать данные из формы в сценарии.
        </p>
    </div>
    <div class="text__lesson">
        <h3 class="subtitle">Метод GET.</h3>
        <p>
            Коротко напомним, что метод <b>GET</b> - используется для получения информации от сервера по заданному URI (URI в HTTP). Запросы клиентов, использующие метод <b>GET</b> должны получать только данные и не должны никак влиять на эти данные.<br>
            Таким образом, метод <b>GET</b> запрашивает представление ресурса. Запросы с использованием этого метода могут только извлекать данные.
        </p>
        <p>
            Для получения данных из вышеуказанной формы с помощью метода GET используем следующий код в PHP:
            <ul>
                <li>?php</li>
                <li> print_r($-GET);</li>
                <li>?></li>                
            </ul>
            где $_GET - являентся пустым массивом.<br>
            <b style="color:#00008B;">Напишем наш код с $_GET  и далее посмотрим как он работает.</b><br>
            <b style="color:#00008B;"><?php 
                print_r($_GET);
            ?> </b>
        </p>
        <p>
            Видим, что наш массив GET имеет теперь данные, которые были введены нами в форму и самое главное мы видим в строке браузера данные которые мы отправили.<br>
            Так в строке браузера мы видим, что отправили имя ?name=Иван, а внизу видим строку с нашим массивовом - Array ([name]=> Иван). 
        </p>
        <p>
            Чтобы достать запись из массива GET пишем следующий PHP код:
            <ul>
                <li>?php</li>
                <li>echo $_GET['name'];</li>
                <li>?></li>
            </ul>
            <b style="color:#00008B;">Пишем данный код и смотрим ниже результат.</b>
        </p>
        <?php    echo "<b style='color:#00008B;'>".$_GET['name']."</b>";    ?>
        <p>
            У метода GET есть несколько недостатков:
            <ul>
                <li>Ограниченное количество вводимых символов, всего можно ввести 1024 символа;</li>
                <li>Данные переданные GET кэшируются. Это значит, что логин и пароль, переданные через GET-запрос, могут остаться в интернете навсегда, например, в веб-архиве или кэше Гугла;</li>
                <li>Также данные остаются в истории браузера. Чтобы узнать, какие данные отправлялись, достаточно нажать Ctrl+H;</li>
                <li>Они(данные) сохраняются в закладках и пересылаются. Можно не обратить внимания и опубликовать в соцсетях или отправить ссылку с приватной информацией в GET-запросе;</li>
                <li>Кроме того, данные сохраняются в логах сервера. Например, нельзя отправлять данные банковских карт через GET-запрос, так как это создаёт риски для пользователей.</li>
                <li>Метод GET не может отправлять на сервер двоичные данные, например изображения или текстовые документы.</li>
            </ul>
        </p>
        <p>
            К тому же метод GET — это метод для чтения данных с сайта. Например, для доступа к указанной странице. Он говорит серверу, что клиент хочет прочитать указанный документ. На практике этот метод используется чаще всего, например, в интернет-магазинах на странице каталога. Фильтры, которые выбирает пользователь, передаются через метод GET.            
        </p>
        <p>Поэтому метод GET не используют для передачи приватных данных, в том числе, когда количество символов может быть более 1024.</p>
        <p>
            GET может использоваться для отправки не конфиденциальных данных.
        </p>
    </div>
    <div class="text__lesson">
        <h3 class="subtitle">Метод POST</h3>
        <p>
            Метод POST передает информацию через HTTP-заголовки. Информация кодируется и помещается в заголовок QUERY_STRING.
        </p>
        <p>
            Информация, отправляемая методом POST, проходят через HTTP-заголовок, поэтому уровень безопасности зависит от протокола HTTP. Используя Secure HTTP, можно обеспечить защиту важной информации.
        </p>
        <p>
            Метод POST, в отличие от GET, не устанавливает ограничения, а значит, если вы передаёте объёмную информацию, то лучше пользоваться именно им.
        </p>
        <p>
            Так же к преимуществам метода POST стоит отнести возможность передавать файлы на сервер.
        </p>
        <h5 class="subtitle">Переходим к использованию метода POST.</h5>
        <p>
            Пишем форму для метода POST, она будет такая же как и для GET, но теперь добавим поля под textarea и затем в следующем примере для отправления файла.
        </p>
        <p>
            Пишем код нашей формы:
            <ul>
                <li>form  method="get"></li>
                <li> input type="text" name="name" placeholder="Ваше имя"></li>
                <li>textarea name="massage" /teaxtarea></li>
                <li>input type="submit" value="отправить"></li>
            </ul>
            <br>
            В итоге наше форма будет выглядит вот так:
        </p>
            <form  method="post">
                <input type="text" name="name" placeholder="Ваше имя"></input>
                <textarea name="massage" placeholder="Введите сообщение"></textarea>
                <input type="submit" value="отправить">
            </fomr>
        <p>
           Теперь пишем код PHP для метода POST.
           <ul>
               <li>?php</li>
               <li>print_r($_POST);</li>
               <li>?></li>
            </ul> 
            <b style="color:#FF4500;">Пишем данный код и смотрим как он работает.</b>
        </p>
        <b style="color:#FF4500;">
            <?php
                print_r($_POST);
            ?>
        </b>
        <p>
            Теперь выведем/достанем из массива POST переданные данные.<br>
            Делается это по такой же аналогии, что и с данными GET. 
        </p>
        <p>
            Пишем следующий PHP код для вывода данных из массива POST:
            <ul>
                <li>?php</li>
                <li>echo $_POST['name'];</li>
                <li>?></li>
            </ul> 
            <b style="color:#FF4500;">Смотрим на результат:<br> 
            <?php
                echo $_POST['name'];
            ?></br> 
            </b>          
        </p>
        <p>
            Однако, если в поле ввода не будет информации, то вышеуказанный вывод данных из массива POST - echo $_POST['name'];, выдаст ошибку.
        </p>
        <p>Поэтому нам следует прописать в коде PHP проверку на наличие данных в массиве POST. ДЛя этого используем функцию isset(); - котоорая проверит наличие переменной в массиве POST.</p>
        <p>Пишем следующий код PHP с использованием функции isset:
            <ul>
                <li>?php</li>
                <li>if(isset($_POST['name'])){</li>
                <li>echo "Данные из массива - ".$_POST['name'];</li>
                <li>} ?></li>
            </ul>
        </p>
        <p>Пишем указанный код и смотрим его действие, при этом создадим новую форму.<br>
            <b style="color:#FF8C00;">Результаты нового кода PHP.<br>
                <form  method="post">
                    <input type="text" name="name" placeholder="Имя"></input>
                    <textarea name="massage" placeholder="Сообщение"></textarea></textarea>
                    <input type="submit" value="отправить">
                </fomr>    
                    <?php
                       if(isset($_POST['name'])){
                            echo "<br>"."Данные из массива - "."<br>"."имя - ".$_POST['name']."<br>"." содержание сообщения -  ".$_POST['massage'];
                        } 
                    ?>
            </b>
        </p>
        <p>Также в форму мы можем добавить скрытые данные о пользователе или какие то другие, которые будт нам необходимы и при выводе этих данных, у нас также будут выводится данные из скрытых полей формы.</p>
        <p>
            Пример создания формы со скрытыми полями и выводом их с помощью PHP кода:
            <ul>
                <li>form  method="post"></li>
                <li> input type="text" name="name" placeholder="Ваше имя"></li>
                <li>textarea name="massage" /teaxtarea></li>
                <li>input type="hidden" name="id_user" value="1313"></li>
                <li>input type="submit" value="отправить"></li>
            </ul>
            в данном коде скрытое поле имеет type="hidden", где мы указали id пользователя и его номер 1313.
        </p>
        <p>
            Теперь пишем новую форму и смотрим результат:<br>
                <form  method="post">
                    <input type="text" name="name" placeholder="Ваше имя"><br>
                    <input type="hidden" name="id_user" value="1313">
                    <textarea name="massage" placeholder="Сообщение"></textarea>
                    <input type="submit" value="отправить">
                </form>
        </p>
        <p>
            Видим, что скрытого поля посетитель сайта не видит. <br>
            Теперь выведем/вызовем содержимое массива и смотрим, и смотрим, что можем увидеть мы.<br>
            Для вывода/вызова данных из массива $_POST используем функцию print_r();<br>
            <b style="color:#4B0082;">Пишем код и смотрим результат:<br>
            <?php
            print_r($_POST);
            ?>
            </b> 

        </p>

    </div>
    
    
    
</body>
</html>